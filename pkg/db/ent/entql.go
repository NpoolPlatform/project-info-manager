// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/project-info-manager/pkg/db/ent/description"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   description.Table,
			Columns: description.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: description.FieldID,
			},
		},
		Type: "Description",
		Fields: map[string]*sqlgraph.FieldSpec{
			description.FieldCreatedAt:  {Type: field.TypeUint32, Column: description.FieldCreatedAt},
			description.FieldUpdatedAt:  {Type: field.TypeUint32, Column: description.FieldUpdatedAt},
			description.FieldDeletedAt:  {Type: field.TypeUint32, Column: description.FieldDeletedAt},
			description.FieldCoinTypeID: {Type: field.TypeUUID, Column: description.FieldCoinTypeID},
			description.FieldTitle:      {Type: field.TypeString, Column: description.FieldTitle},
			description.FieldMessage:    {Type: field.TypeString, Column: description.FieldMessage},
			description.FieldUsedFor:    {Type: field.TypeString, Column: description.FieldUsedFor},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dq *DescriptionQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DescriptionQuery builder.
func (dq *DescriptionQuery) Filter() *DescriptionFilter {
	return &DescriptionFilter{dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DescriptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DescriptionMutation builder.
func (m *DescriptionMutation) Filter() *DescriptionFilter {
	return &DescriptionFilter{m}
}

// DescriptionFilter provides a generic filtering capability at runtime for DescriptionQuery.
type DescriptionFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DescriptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DescriptionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(description.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *DescriptionFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(description.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *DescriptionFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(description.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *DescriptionFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(description.FieldDeletedAt))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *DescriptionFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(description.FieldCoinTypeID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *DescriptionFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(description.FieldTitle))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *DescriptionFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(description.FieldMessage))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *DescriptionFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(description.FieldUsedFor))
}
