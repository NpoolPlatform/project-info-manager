// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/project-info-manager/pkg/db/ent/coindescription"
	"github.com/NpoolPlatform/project-info-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CoinDescriptionUpdate is the builder for updating CoinDescription entities.
type CoinDescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *CoinDescriptionMutation
}

// Where appends a list predicates to the CoinDescriptionUpdate builder.
func (cdu *CoinDescriptionUpdate) Where(ps ...predicate.CoinDescription) *CoinDescriptionUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetCreateAt sets the "create_at" field.
func (cdu *CoinDescriptionUpdate) SetCreateAt(u uint32) *CoinDescriptionUpdate {
	cdu.mutation.ResetCreateAt()
	cdu.mutation.SetCreateAt(u)
	return cdu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cdu *CoinDescriptionUpdate) SetNillableCreateAt(u *uint32) *CoinDescriptionUpdate {
	if u != nil {
		cdu.SetCreateAt(*u)
	}
	return cdu
}

// AddCreateAt adds u to the "create_at" field.
func (cdu *CoinDescriptionUpdate) AddCreateAt(u int32) *CoinDescriptionUpdate {
	cdu.mutation.AddCreateAt(u)
	return cdu
}

// SetUpdateAt sets the "update_at" field.
func (cdu *CoinDescriptionUpdate) SetUpdateAt(u uint32) *CoinDescriptionUpdate {
	cdu.mutation.ResetUpdateAt()
	cdu.mutation.SetUpdateAt(u)
	return cdu
}

// AddUpdateAt adds u to the "update_at" field.
func (cdu *CoinDescriptionUpdate) AddUpdateAt(u int32) *CoinDescriptionUpdate {
	cdu.mutation.AddUpdateAt(u)
	return cdu
}

// SetDeleteAt sets the "delete_at" field.
func (cdu *CoinDescriptionUpdate) SetDeleteAt(u uint32) *CoinDescriptionUpdate {
	cdu.mutation.ResetDeleteAt()
	cdu.mutation.SetDeleteAt(u)
	return cdu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (cdu *CoinDescriptionUpdate) SetNillableDeleteAt(u *uint32) *CoinDescriptionUpdate {
	if u != nil {
		cdu.SetDeleteAt(*u)
	}
	return cdu
}

// AddDeleteAt adds u to the "delete_at" field.
func (cdu *CoinDescriptionUpdate) AddDeleteAt(u int32) *CoinDescriptionUpdate {
	cdu.mutation.AddDeleteAt(u)
	return cdu
}

// SetAppID sets the "app_id" field.
func (cdu *CoinDescriptionUpdate) SetAppID(u uuid.UUID) *CoinDescriptionUpdate {
	cdu.mutation.SetAppID(u)
	return cdu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cdu *CoinDescriptionUpdate) SetCoinTypeID(u uuid.UUID) *CoinDescriptionUpdate {
	cdu.mutation.SetCoinTypeID(u)
	return cdu
}

// SetTitle sets the "title" field.
func (cdu *CoinDescriptionUpdate) SetTitle(s string) *CoinDescriptionUpdate {
	cdu.mutation.SetTitle(s)
	return cdu
}

// SetMessage sets the "message" field.
func (cdu *CoinDescriptionUpdate) SetMessage(s string) *CoinDescriptionUpdate {
	cdu.mutation.SetMessage(s)
	return cdu
}

// SetUsedFor sets the "used_for" field.
func (cdu *CoinDescriptionUpdate) SetUsedFor(s string) *CoinDescriptionUpdate {
	cdu.mutation.SetUsedFor(s)
	return cdu
}

// Mutation returns the CoinDescriptionMutation object of the builder.
func (cdu *CoinDescriptionUpdate) Mutation() *CoinDescriptionMutation {
	return cdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CoinDescriptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cdu.defaults(); err != nil {
		return 0, err
	}
	if len(cdu.hooks) == 0 {
		if err = cdu.check(); err != nil {
			return 0, err
		}
		affected, err = cdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cdu.check(); err != nil {
				return 0, err
			}
			cdu.mutation = mutation
			affected, err = cdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cdu.hooks) - 1; i >= 0; i-- {
			if cdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CoinDescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CoinDescriptionUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CoinDescriptionUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *CoinDescriptionUpdate) defaults() error {
	if _, ok := cdu.mutation.UpdateAt(); !ok {
		if coindescription.UpdateDefaultUpdateAt == nil {
			return fmt.Errorf("ent: uninitialized coindescription.UpdateDefaultUpdateAt (forgotten import ent/runtime?)")
		}
		v := coindescription.UpdateDefaultUpdateAt()
		cdu.mutation.SetUpdateAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cdu *CoinDescriptionUpdate) check() error {
	if v, ok := cdu.mutation.Message(); ok {
		if err := coindescription.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "CoinDescription.message": %w`, err)}
		}
	}
	return nil
}

func (cdu *CoinDescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coindescription.Table,
			Columns: coindescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coindescription.FieldID,
			},
		},
	}
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldCreateAt,
		})
	}
	if value, ok := cdu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldCreateAt,
		})
	}
	if value, ok := cdu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldUpdateAt,
		})
	}
	if value, ok := cdu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldUpdateAt,
		})
	}
	if value, ok := cdu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldDeleteAt,
		})
	}
	if value, ok := cdu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldDeleteAt,
		})
	}
	if value, ok := cdu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coindescription.FieldAppID,
		})
	}
	if value, ok := cdu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coindescription.FieldCoinTypeID,
		})
	}
	if value, ok := cdu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coindescription.FieldTitle,
		})
	}
	if value, ok := cdu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coindescription.FieldMessage,
		})
	}
	if value, ok := cdu.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coindescription.FieldUsedFor,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coindescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CoinDescriptionUpdateOne is the builder for updating a single CoinDescription entity.
type CoinDescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoinDescriptionMutation
}

// SetCreateAt sets the "create_at" field.
func (cduo *CoinDescriptionUpdateOne) SetCreateAt(u uint32) *CoinDescriptionUpdateOne {
	cduo.mutation.ResetCreateAt()
	cduo.mutation.SetCreateAt(u)
	return cduo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cduo *CoinDescriptionUpdateOne) SetNillableCreateAt(u *uint32) *CoinDescriptionUpdateOne {
	if u != nil {
		cduo.SetCreateAt(*u)
	}
	return cduo
}

// AddCreateAt adds u to the "create_at" field.
func (cduo *CoinDescriptionUpdateOne) AddCreateAt(u int32) *CoinDescriptionUpdateOne {
	cduo.mutation.AddCreateAt(u)
	return cduo
}

// SetUpdateAt sets the "update_at" field.
func (cduo *CoinDescriptionUpdateOne) SetUpdateAt(u uint32) *CoinDescriptionUpdateOne {
	cduo.mutation.ResetUpdateAt()
	cduo.mutation.SetUpdateAt(u)
	return cduo
}

// AddUpdateAt adds u to the "update_at" field.
func (cduo *CoinDescriptionUpdateOne) AddUpdateAt(u int32) *CoinDescriptionUpdateOne {
	cduo.mutation.AddUpdateAt(u)
	return cduo
}

// SetDeleteAt sets the "delete_at" field.
func (cduo *CoinDescriptionUpdateOne) SetDeleteAt(u uint32) *CoinDescriptionUpdateOne {
	cduo.mutation.ResetDeleteAt()
	cduo.mutation.SetDeleteAt(u)
	return cduo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (cduo *CoinDescriptionUpdateOne) SetNillableDeleteAt(u *uint32) *CoinDescriptionUpdateOne {
	if u != nil {
		cduo.SetDeleteAt(*u)
	}
	return cduo
}

// AddDeleteAt adds u to the "delete_at" field.
func (cduo *CoinDescriptionUpdateOne) AddDeleteAt(u int32) *CoinDescriptionUpdateOne {
	cduo.mutation.AddDeleteAt(u)
	return cduo
}

// SetAppID sets the "app_id" field.
func (cduo *CoinDescriptionUpdateOne) SetAppID(u uuid.UUID) *CoinDescriptionUpdateOne {
	cduo.mutation.SetAppID(u)
	return cduo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cduo *CoinDescriptionUpdateOne) SetCoinTypeID(u uuid.UUID) *CoinDescriptionUpdateOne {
	cduo.mutation.SetCoinTypeID(u)
	return cduo
}

// SetTitle sets the "title" field.
func (cduo *CoinDescriptionUpdateOne) SetTitle(s string) *CoinDescriptionUpdateOne {
	cduo.mutation.SetTitle(s)
	return cduo
}

// SetMessage sets the "message" field.
func (cduo *CoinDescriptionUpdateOne) SetMessage(s string) *CoinDescriptionUpdateOne {
	cduo.mutation.SetMessage(s)
	return cduo
}

// SetUsedFor sets the "used_for" field.
func (cduo *CoinDescriptionUpdateOne) SetUsedFor(s string) *CoinDescriptionUpdateOne {
	cduo.mutation.SetUsedFor(s)
	return cduo
}

// Mutation returns the CoinDescriptionMutation object of the builder.
func (cduo *CoinDescriptionUpdateOne) Mutation() *CoinDescriptionMutation {
	return cduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CoinDescriptionUpdateOne) Select(field string, fields ...string) *CoinDescriptionUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CoinDescription entity.
func (cduo *CoinDescriptionUpdateOne) Save(ctx context.Context) (*CoinDescription, error) {
	var (
		err  error
		node *CoinDescription
	)
	if err := cduo.defaults(); err != nil {
		return nil, err
	}
	if len(cduo.hooks) == 0 {
		if err = cduo.check(); err != nil {
			return nil, err
		}
		node, err = cduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cduo.check(); err != nil {
				return nil, err
			}
			cduo.mutation = mutation
			node, err = cduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cduo.hooks) - 1; i >= 0; i-- {
			if cduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CoinDescriptionUpdateOne) SaveX(ctx context.Context) *CoinDescription {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CoinDescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CoinDescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *CoinDescriptionUpdateOne) defaults() error {
	if _, ok := cduo.mutation.UpdateAt(); !ok {
		if coindescription.UpdateDefaultUpdateAt == nil {
			return fmt.Errorf("ent: uninitialized coindescription.UpdateDefaultUpdateAt (forgotten import ent/runtime?)")
		}
		v := coindescription.UpdateDefaultUpdateAt()
		cduo.mutation.SetUpdateAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cduo *CoinDescriptionUpdateOne) check() error {
	if v, ok := cduo.mutation.Message(); ok {
		if err := coindescription.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "CoinDescription.message": %w`, err)}
		}
	}
	return nil
}

func (cduo *CoinDescriptionUpdateOne) sqlSave(ctx context.Context) (_node *CoinDescription, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coindescription.Table,
			Columns: coindescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coindescription.FieldID,
			},
		},
	}
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoinDescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coindescription.FieldID)
		for _, f := range fields {
			if !coindescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coindescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldCreateAt,
		})
	}
	if value, ok := cduo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldCreateAt,
		})
	}
	if value, ok := cduo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldUpdateAt,
		})
	}
	if value, ok := cduo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldUpdateAt,
		})
	}
	if value, ok := cduo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldDeleteAt,
		})
	}
	if value, ok := cduo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coindescription.FieldDeleteAt,
		})
	}
	if value, ok := cduo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coindescription.FieldAppID,
		})
	}
	if value, ok := cduo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coindescription.FieldCoinTypeID,
		})
	}
	if value, ok := cduo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coindescription.FieldTitle,
		})
	}
	if value, ok := cduo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coindescription.FieldMessage,
		})
	}
	if value, ok := cduo.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coindescription.FieldUsedFor,
		})
	}
	_node = &CoinDescription{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coindescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
