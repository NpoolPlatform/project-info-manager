// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/project-info-manager/pkg/db/ent/coindescription"
	"github.com/google/uuid"
)

// CoinDescription is the model entity for the CoinDescription schema.
type CoinDescription struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// UsedFor holds the value of the "used_for" field.
	UsedFor string `json:"used_for,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoinDescription) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coindescription.FieldCreateAt, coindescription.FieldUpdateAt, coindescription.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case coindescription.FieldTitle, coindescription.FieldMessage, coindescription.FieldUsedFor:
			values[i] = new(sql.NullString)
		case coindescription.FieldID, coindescription.FieldAppID, coindescription.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CoinDescription", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoinDescription fields.
func (cd *CoinDescription) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coindescription.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cd.ID = *value
			}
		case coindescription.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				cd.CreateAt = uint32(value.Int64)
			}
		case coindescription.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				cd.UpdateAt = uint32(value.Int64)
			}
		case coindescription.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				cd.DeleteAt = uint32(value.Int64)
			}
		case coindescription.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				cd.AppID = *value
			}
		case coindescription.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				cd.CoinTypeID = *value
			}
		case coindescription.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cd.Title = value.String
			}
		case coindescription.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				cd.Message = value.String
			}
		case coindescription.FieldUsedFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field used_for", values[i])
			} else if value.Valid {
				cd.UsedFor = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CoinDescription.
// Note that you need to call CoinDescription.Unwrap() before calling this method if this CoinDescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *CoinDescription) Update() *CoinDescriptionUpdateOne {
	return (&CoinDescriptionClient{config: cd.config}).UpdateOne(cd)
}

// Unwrap unwraps the CoinDescription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *CoinDescription) Unwrap() *CoinDescription {
	tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoinDescription is not a transactional entity")
	}
	cd.config.driver = tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *CoinDescription) String() string {
	var builder strings.Builder
	builder.WriteString("CoinDescription(")
	builder.WriteString(fmt.Sprintf("id=%v", cd.ID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", cd.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", cd.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", cd.DeleteAt))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", cd.AppID))
	builder.WriteString(", coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cd.CoinTypeID))
	builder.WriteString(", title=")
	builder.WriteString(cd.Title)
	builder.WriteString(", message=")
	builder.WriteString(cd.Message)
	builder.WriteString(", used_for=")
	builder.WriteString(cd.UsedFor)
	builder.WriteByte(')')
	return builder.String()
}

// CoinDescriptions is a parsable slice of CoinDescription.
type CoinDescriptions []*CoinDescription

func (cd CoinDescriptions) config(cfg config) {
	for _i := range cd {
		cd[_i].config = cfg
	}
}
